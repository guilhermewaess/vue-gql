type User {
  userId: String
  userName: String!
  email: String!
  emailVerified: Boolean!
  password: String
  avatar: String
  joinDate: String
  favorites: [Post]
}

type Post {
  _id: ID!
  title: String!
  imgUrl: String!
  categories: [String]!
  description: String!
  createdDate: String
  likes: Int
  createdBy: User!
  messages: [Message]
}

type PostsPage {
  posts: [Post]
  hasMore: Boolean
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}


input PaginationInput {
  pageNum: Int!
  pageSize: Int!
}

input SignInWithSocialInput {
  email: String
  email_verified: Boolean
  name: String
  picture: String
  user_id: String
}

input AddPostInput {
  title: String!, 
  imgUrl: String!, 
  categories: [String]!, 
  description: String!, 
}

type Query {
  getPosts: [Post]
  getPost(postId: ID!): Post!
  getUser: User!
  infiniteScrollPosts(pagination: PaginationInput!): PostsPage!
}

type Mutation {
  addPost(post: AddPostInput!): Post!
  signUpUser(userName: String!, email: String!, password: String!): User!
  signInWithSocial(token: String!): User!
}